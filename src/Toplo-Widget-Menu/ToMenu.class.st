"
I'm a composite of Menu items. I can behave as a menu item (this is why I inherit from ToMenuItem) but I manage sub menu items.
"
Class {
	#name : #ToMenu,
	#superclass : #ToMenuItem,
	#traits : 'TToItemBarParent + TToMenuItemBarParent + TToMenuWindowModel',
	#classTraits : 'TToItemBarParent classTrait + TToMenuItemBarParent classTrait + TToMenuWindowModel classTrait',
	#instVars : [
		'isSubmenu',
		'builder',
		'windowManager',
		'openOnHovered'
	],
	#category : #'Toplo-Widget-Menu-Items'
}

{ #category : #accessing }
ToMenu >> bar [

	self
		deprecated: 'Use #itemList instead'
		transformWith: '`@rcvr bar' -> '`@rcvr itemList'.

	^ self itemList
]

{ #category : #testing }
ToMenu >> beInline [

	self manager beInline
]

{ #category : #accessing }
ToMenu >> builder [ 

	^ builder
]

{ #category : #accessing }
ToMenu >> builder: aValuable [

	" aValuable takes myself and the request event as arguments "

	builder := aValuable
]

{ #category : #accessing }
ToMenu >> buttonClickEventClass [

	^ BlMouseDownEvent
]

{ #category : #testing }
ToMenu >> closeOnPicking [

	^ self manager closeOnPicking and: [ self isTopMenu not ]
]

{ #category : #testing }
ToMenu >> closeOnPicking: aBoolean [

	self manager closeOnPicking: aBoolean
]

{ #category : #'t - menu window model' }
ToMenu >> closeWindow [

	self menuWindow ifNotNil: [:mw | mw close ].

]

{ #category : #accessing }
ToMenu >> includes: anElement [

	self menuWindow = anElement ifTrue: [ ^ true ].
	(self items anySatisfy: [ :e | e includes: anElement ]) ifTrue: [
		^ true ].
	^ super includes: anElement
]

{ #category : #initialization }
ToMenu >> initialize [

	super initialize.
	self fitContent.
	isSubmenu := false.
	openOnHovered := true.
	self applySkinInstallerOnFirstRequest: true.

	windowManager := ToMenuWindowManager new
		                 windowBuilder: [ :window :request |
			                 builder ifNotNil: [
					                 self removeAllItems.
					                 self builder cull: self cull: request ].
			                 window root addChild: self itemList ];
		                 yourself.
	self addEventHandler: windowManager
]

{ #category : #testing }
ToMenu >> isInline [

	^ self manager isInline
]

{ #category : #accessing }
ToMenu >> isMenu [

	^ true
]

{ #category : #'t - menu window model' }
ToMenu >> isOpened [ 

	^ self menuWindow notNil and: [ self menuWindow isOpened ]
]

{ #category : #'t - menu window model' }
ToMenu >> isSubmenu [

	^ isSubmenu
]

{ #category : #accessing }
ToMenu >> isSubmenu: aBoolean [

	isSubmenu := aBoolean
]

{ #category : #'t - menu window model' }
ToMenu >> isTopMenu [

	^ self isSubmenu not
]

{ #category : #accessing }
ToMenu >> manager [ 

	^ windowManager 
]

{ #category : #'t - menu window model' }
ToMenu >> menuWindow [

	^ self manager currentWindow
]

{ #category : #'event handling' }
ToMenu >> mouseLeaveEvent: anEvent [

	self itemList secondarySelecter deselectAll
]

{ #category : #'event handling' }
ToMenu >> mouseOverEvent: anEvent [

	(anEvent target hasInParentChain: self)
		ifTrue: [ self menuWindow ifNil: [ self popupEvent: anEvent ] ]
		ifFalse: [ self closeWindow ]
]

{ #category : #'t - item bar parent - accessing' }
ToMenu >> newItemList [

	^ ToMenuItemBarElement new
]

{ #category : #accessing }
ToMenu >> newRawSkin [ 

	^ ToMenuSkin new
]

{ #category : #'adding-removing' }
ToMenu >> onAddedInItemBar: aMenuItemBar [

	aMenuItemBar onAddedMenu: self
]

{ #category : #'adding-removing' }
ToMenu >> onRemovedFromItemBar: aMenuItemBar [

	aMenuItemBar onRemovedMenu: self
]

{ #category : #accessing }
ToMenu >> openOnHovered [

	^ openOnHovered
]

{ #category : #accessing }
ToMenu >> openOnHovered: aBoolean [

	openOnHovered := aBoolean
]

{ #category : #'t - menu window model' }
ToMenu >> popupEvent: anEvent [

	self manager popupEvent: anEvent
]

{ #category : #accessing }
ToMenu >> windowManager [

	self
		deprecated: 'Use #manager instead'
		transformWith: '`@rcvr windowManager' -> '`@rcvr manager'.
	^ self manager
]
